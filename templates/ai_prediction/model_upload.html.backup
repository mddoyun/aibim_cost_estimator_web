<!--templates/ai_prediction/model_upload.html-->

{% load static %}
<!DOCTYPE html>
<html>
  <head>
    <title>AI 모델 업로드 - AIBIM CostEstimator</title>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, user-scalable=no"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
    />
    <link rel="stylesheet" href="{% static 'css/main.css'%}" />
  </head>
  <body class="is-preload">
    <!-- 네비게이션 헤더 -->
    <div id="page-wrapper">
      <!-- Header -->
      <div id="header">
        <!-- Logo -->
        <h1>
          <a href="/" id="logo">AIBIM <em>Cost Estimator</em></a>
        </h1>

        <!-- Nav -->
        <nav id="nav">
          <ul>
            <li><a href="/">홈</a></li>
            <li class="current">
              <a href="#">계획설계단계 견적</a>
              <ul>
                <li>
                  <a href="/ai_prediction/">AI 개산견적</a>
                </li>
              </ul>
            </li>
            <li>
              <a href="#">중간설계단계 견적</a>
              <ul>
                <li>
                  <a href="/ifc_ai_prediction/">AI+BIM 개산견적(IFC기반)</a>
                </li>
              </ul>
            </li>
            <li>
              <a href="#">실시설계단계 견적</a>
              <ul>
                <li>
                  <a href="/dd_by_ifc/">AI+BIM 상세견적(IFC기반)</a>
                </li>
              </ul>
            </li>
            <li>
              <a href="/ai_learning">AI모델 학습</a>
            </li>
          </ul>
        </nav>
      </div>

      <div id="nav_sub">
        <h6 class="text-center">
          <b>AI+BIM 개산견적</b> <span>(IFC기반)</span>
        </h6>
      </div>
    </div>

    <!-- Status Modal -->
    <div class="modal fade" id="statusModal" tabindex="-1">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">업로드 상태</h5>
          </div>
          <div class="modal-body">
            <div id="statusMessage"></div>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
            >
              닫기
            </button>
          </div>
        </div>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
      // CSRF 토큰 가져오기 함수
      function getCookie(name) {
        let cookieValue = null;
        if (document.cookie && document.cookie !== "") {
          const cookies = document.cookie.split(";");
          for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            if (cookie.substring(0, name.length + 1) === name + "=") {
              cookieValue = decodeURIComponent(
                cookie.substring(name.length + 1)
              );
              break;
            }
          }
        }
        return cookieValue;
      }

      document
        .getElementById("uploadForm")
        .addEventListener("submit", async function (e) {
          e.preventDefault();

          const formData = new FormData(this);
          const statusModal = new bootstrap.Modal(
            document.getElementById("statusModal")
          );
          const statusMessage = document.getElementById("statusMessage");

          // 업로드 중 상태 표시
          statusMessage.innerHTML =
            '<div class="text-center"><div class="spinner-border text-primary" role="status"></div><br>모델 업로드 중...</div>';
          statusModal.show();

          try {
            const response = await fetch(
              '{% url "ai_prediction:model_upload" %}',
              {
                method: "POST",
                body: formData,
                headers: {
                  "X-CSRFToken": getCookie("csrftoken"),
                },
              }
            );

            // 응답 상태 확인
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }

            // 응답 타입 확인
            const contentType = response.headers.get("content-type");
            if (!contentType || !contentType.includes("application/json")) {
              const textResponse = await response.text();
              console.error("Expected JSON but got:", textResponse);
              throw new Error("서버가 올바른 응답을 반환하지 않았습니다.");
            }

            const result = await response.json();

            if (result.success) {
              statusMessage.innerHTML =
                '<div class="alert alert-success">모델이 성공적으로 업로드되었습니다!</div>';
              setTimeout(() => {
                location.reload();
              }, 1500);
            } else {
              statusMessage.innerHTML = `<div class="alert alert-danger">오류: ${result.error}</div>`;
            }
          } catch (error) {
            console.error("Upload error:", error);
            statusMessage.innerHTML = `<div class="alert alert-danger">업로드 중 오류가 발생했습니다: ${error.message}</div>`;
          }
        });
    </script>
    <script src="{% static 'js/jquery.min.js'%}"></script>
    <script src="{% static 'js/jquery.dropotron.min.js'%}"></script>
    <script src="{% static 'js/browser.min.js'%}"></script>
    <script src="{% static 'js/breakpoints.min.js'%}"></script>
    <script src="{% static 'js/util.js'%}"></script>
    <script src="{% static 'js/main.js'%}"></script>
  </body>
</html>
